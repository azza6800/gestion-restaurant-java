package interfaces;

import javax.swing.*;
import java.awt.*;
import java.io.File;
import java.util.HashMap;
import java.util.Map;

public class ImageUtils {
    private static final Map<String, String> CATEGORY_ICONS = new HashMap<>();
    
    static {
        // Initialisation des ic√¥nes par cat√©gorie
        CATEGORY_ICONS.put("Plat", "üçΩÔ∏è");
        CATEGORY_ICONS.put("Sandwich", "ü•™");
        CATEGORY_ICONS.put("Salade", "ü•ó");
        CATEGORY_ICONS.put("Dessert", "üç∞");
        CATEGORY_ICONS.put("Viennoiserie", "ü•ê");
        CATEGORY_ICONS.put("Boisson", "ü•§");
    }

    /**
     * Cr√©e une ic√¥ne redimensionn√©e √† partir de donn√©es d'image brutes
     * @param imageData Les donn√©es binaires de l'image
     * @param width La largeur souhait√©e
     * @param height La hauteur souhait√©e
     * @return ImageIcon redimensionn√©e ou null si les donn√©es sont invalides
     */
    public static ImageIcon createResizedIcon(byte[] imageData, int width, int height) {
        if (imageData == null || imageData.length == 0) {
            return null;
        }
        
        try {
            ImageIcon icon = new ImageIcon(imageData);
            Image scaledImage = icon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
            return new ImageIcon(scaledImage);
        } catch (Exception e) {
            System.err.println("Erreur lors du traitement de l'image: " + e.getMessage());
            return null;
        }
    }

    /**
     * Obtient l'emoji correspondant √† une cat√©gorie de produit
     * @param category La cat√©gorie du produit
     * @return L'emoji repr√©sentant la cat√©gorie
     */
    public static String getCategoryIcon(String category) {
        return CATEGORY_ICONS.getOrDefault(category, "üç¥"); // Ic√¥ne par d√©faut
    }

    /**
     * Charge une image √† partir d'un fichier
     * @param file Le fichier image √† charger
     * @return Les donn√©es binaires de l'image ou null en cas d'erreur
     */
    public static byte[] loadImageFile(File file) {
        // Impl√©mentation √† compl√©ter avec java.nio.file.Files
        return null;
    }

    /**
     * V√©rifie si un fichier est une image valide
     * @param file Le fichier √† v√©rifier
     * @return true si le fichier est une image valide
     */
    public static boolean isValidImageFile(File file) {
        if (file == null || !file.exists()) {
            return false;
        }
        
        String name = file.getName().toLowerCase();
        return name.endsWith(".jpg") || name.endsWith(".jpeg") || 
               name.endsWith(".png") || name.endsWith(".gif");
    }

    /**
     * Cr√©e un ImageIcon √† partir d'un fichier avec redimensionnement
     * @param file Le fichier image
     * @param width Largeur souhait√©e
     * @param height Hauteur souhait√©e
     * @return ImageIcon redimensionn√© ou null en cas d'erreur
     */
    public static ImageIcon createIconFromFile(File file, int width, int height) {
        if (!isValidImageFile(file)) {
            return null;
        }
        
        try {
            ImageIcon icon = new ImageIcon(file.getAbsolutePath());
            Image scaledImage = icon.getImage().getScaledInstance(width, height, Image.SCALE_SMOOTH);
            return new ImageIcon(scaledImage);
        } catch (Exception e) {
            System.err.println("Erreur lors du chargement de l'image: " + e.getMessage());
            return null;
        }
    }
}